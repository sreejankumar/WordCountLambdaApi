# This is a basic workflow to help you get started with Actions

name: publish

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: ubuntu-latest
    name: Dotnet Side by Side testing sample
    steps:
      - uses: actions/checkout@v2
      - name: Setup dotnet 2.2
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '2.2.103'
      - name: Setup dotnet 3.1
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'
      - name: Install dependencies
        run: dotnet restore
        working-directory: src/apps/WordCount.Api
      - name: Bulid Project
        run: dotnet build
        working-directory: src/apps/WordCount.Api
      - name: Test Project
        run: dotnet test
        working-directory: src/tests/WordCount.Api.Tests          
      - name: .NET Lambda build and deploy
        uses: evalytica/dotnet-lambda-actions/deploy@v0.1.0
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_Region }}
          DOTNET_LAMBDA_PACKAGE_NAME: WordCount.Api.zip
          DOTNET_LAMBDA_FUNCTION_HANDLER: WordCount.Api::WordCount.Api.LambdaEntryPoint::FunctionHandlerAsync
          DOTNET_LAMBDA_FUNCTION_NAME: word-count-lambda-api
          DOTNET_LAMBDA_S3_LOCATION: word-count-api/folder/word-count-lambda-api
          DOTNET_LAMBDA_WORKING_DIR: src/apps/WordCount.Api
